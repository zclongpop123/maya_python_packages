# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CGAL_Mesh_3', [dirname(__file__)])
        except ImportError:
            import _CGAL_Mesh_3
            return _CGAL_Mesh_3
        if fp is not None:
            try:
                _mod = imp.load_module('_CGAL_Mesh_3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CGAL_Mesh_3 = swig_import_helper()
    del swig_import_helper
else:
    import _CGAL_Mesh_3
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import CGAL.CGAL_Kernel
VERTEX = _CGAL_Mesh_3.VERTEX
EDGE = _CGAL_Mesh_3.EDGE
FACET = _CGAL_Mesh_3.FACET
CELL = _CGAL_Mesh_3.CELL
OUTSIDE_CONVEX_HULL = _CGAL_Mesh_3.OUTSIDE_CONVEX_HULL
OUTSIDE_AFFINE_HULL = _CGAL_Mesh_3.OUTSIDE_AFFINE_HULL
FACET_VERTICES_ON_SURFACE = _CGAL_Mesh_3.FACET_VERTICES_ON_SURFACE
FACET_VERTICES_ON_SAME_SURFACE_PATCH = _CGAL_Mesh_3.FACET_VERTICES_ON_SAME_SURFACE_PATCH
FACET_VERTICES_ON_SAME_SURFACE_PATCH_WITH_ADJACENCY_CHECK = _CGAL_Mesh_3.FACET_VERTICES_ON_SAME_SURFACE_PATCH_WITH_ADJACENCY_CHECK
BOUND_REACHED = _CGAL_Mesh_3.BOUND_REACHED
TIME_LIMIT_REACHED = _CGAL_Mesh_3.TIME_LIMIT_REACHED
CANT_IMPROVE_ANYMORE = _CGAL_Mesh_3.CANT_IMPROVE_ANYMORE
CONVERGENCE_REACHED = _CGAL_Mesh_3.CONVERGENCE_REACHED
MAX_ITERATION_NUMBER_REACHED = _CGAL_Mesh_3.MAX_ITERATION_NUMBER_REACHED
class Mesh_3_parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_parameters, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_parameters()
        try: self.this.append(this)
        except: self.this = this
    def set_lloyd(self, *args): return _CGAL_Mesh_3.Mesh_3_parameters_set_lloyd(self, *args)
    def set_odt(self, *args): return _CGAL_Mesh_3.Mesh_3_parameters_set_odt(self, *args)
    def set_perturb(self, *args): return _CGAL_Mesh_3.Mesh_3_parameters_set_perturb(self, *args)
    def set_exude(self, *args): return _CGAL_Mesh_3.Mesh_3_parameters_set_exude(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_parameters_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_parameters
    __del__ = lambda self : None;
Mesh_3_parameters_swigregister = _CGAL_Mesh_3.Mesh_3_parameters_swigregister
Mesh_3_parameters_swigregister(Mesh_3_parameters)

class Mesh_3_Quality(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Quality, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Quality, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Mesh_3_Quality(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _CGAL_Mesh_3.Mesh_3_Quality_first_set
    __swig_getmethods__["first"] = _CGAL_Mesh_3.Mesh_3_Quality_first_get
    if _newclass:first = _swig_property(_CGAL_Mesh_3.Mesh_3_Quality_first_get, _CGAL_Mesh_3.Mesh_3_Quality_first_set)
    __swig_setmethods__["second"] = _CGAL_Mesh_3.Mesh_3_Quality_second_set
    __swig_getmethods__["second"] = _CGAL_Mesh_3.Mesh_3_Quality_second_get
    if _newclass:second = _swig_property(_CGAL_Mesh_3.Mesh_3_Quality_second_get, _CGAL_Mesh_3.Mesh_3_Quality_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Quality
    __del__ = lambda self : None;
Mesh_3_Quality_swigregister = _CGAL_Mesh_3.Mesh_3_Quality_swigregister
Mesh_3_Quality_swigregister(Mesh_3_Quality)

class Mesh_3_Badness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Badness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Badness, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_Badness()
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _CGAL_Mesh_3.Mesh_3_Badness_empty(self)
    def value(self): return _CGAL_Mesh_3.Mesh_3_Badness_value(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_Badness_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Badness
    __del__ = lambda self : None;
Mesh_3_Badness_swigregister = _CGAL_Mesh_3.Mesh_3_Badness_swigregister
Mesh_3_Badness_swigregister(Mesh_3_Badness)

import CGAL.CGAL_Polyhedron_3
class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Object()
        try: self.this.append(this)
        except: self.this = this
    def is_Point_2(self): return _CGAL_Mesh_3.Object_is_Point_2(self)
    def get_Point_2(self): return _CGAL_Mesh_3.Object_get_Point_2(self)
    def is_Point_3(self): return _CGAL_Mesh_3.Object_is_Point_3(self)
    def get_Point_3(self): return _CGAL_Mesh_3.Object_get_Point_3(self)
    def is_Triangle_2(self): return _CGAL_Mesh_3.Object_is_Triangle_2(self)
    def get_Triangle_2(self): return _CGAL_Mesh_3.Object_get_Triangle_2(self)
    def is_Triangle_3(self): return _CGAL_Mesh_3.Object_is_Triangle_3(self)
    def get_Triangle_3(self): return _CGAL_Mesh_3.Object_get_Triangle_3(self)
    def is_Segment_3(self): return _CGAL_Mesh_3.Object_is_Segment_3(self)
    def get_Segment_3(self): return _CGAL_Mesh_3.Object_get_Segment_3(self)
    def is_Segment_2(self): return _CGAL_Mesh_3.Object_is_Segment_2(self)
    def get_Segment_2(self): return _CGAL_Mesh_3.Object_get_Segment_2(self)
    def is_Line_3(self): return _CGAL_Mesh_3.Object_is_Line_3(self)
    def get_Line_3(self): return _CGAL_Mesh_3.Object_get_Line_3(self)
    def is_Line_2(self): return _CGAL_Mesh_3.Object_is_Line_2(self)
    def get_Line_2(self): return _CGAL_Mesh_3.Object_get_Line_2(self)
    def is_Plane_3(self): return _CGAL_Mesh_3.Object_is_Plane_3(self)
    def get_Plane_3(self): return _CGAL_Mesh_3.Object_get_Plane_3(self)
    def is_Ray_2(self): return _CGAL_Mesh_3.Object_is_Ray_2(self)
    def get_Ray_2(self): return _CGAL_Mesh_3.Object_get_Ray_2(self)
    def is_Ray_3(self): return _CGAL_Mesh_3.Object_is_Ray_3(self)
    def get_Ray_3(self): return _CGAL_Mesh_3.Object_get_Ray_3(self)
    def empty(self): return _CGAL_Mesh_3.Object_empty(self)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _CGAL_Mesh_3.Object_swigregister
Object_swigregister(Object)

class Ref_Locate_type_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Locate_type_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Locate_type_3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Ref_Locate_type_3(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _CGAL_Mesh_3.Ref_Locate_type_3_set(self, *args)
    def object(self): return _CGAL_Mesh_3.Ref_Locate_type_3_object(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Ref_Locate_type_3_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Ref_Locate_type_3
    __del__ = lambda self : None;
Ref_Locate_type_3_swigregister = _CGAL_Mesh_3.Ref_Locate_type_3_swigregister
Ref_Locate_type_3_swigregister(Ref_Locate_type_3)

class Mesh_3_regular_triangulation_3_Cell_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Cell_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Cell_handle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Cell_handle()
        try: self.this.append(this)
        except: self.this = this
    def vertex(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_vertex(self, *args)
    def neighbor(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_neighbor(self, *args)
    def index(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_index(self, *args)
    def set_vertex(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_vertex(self, *args)
    def set_vertices(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_vertices(self, *args)
    def set_neighbor(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_neighbor(self, *args)
    def set_neighbors(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_neighbors(self, *args)
    def is_valid(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_is_valid(self, *args)
    def has_vertex(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_has_vertex(self, *args)
    def has_neighbor(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_has_neighbor(self, *args)
    def __lt__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___lt__(self, *args)
    def __gt__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___gt__(self, *args)
    def __le__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___le__(self, *args)
    def __ge__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___ge__(self, *args)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___ne__(self, *args)
    def __hash__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle___hash__(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_deepcopy(self, *args)
    def subdomain_index(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_subdomain_index(self)
    def set_subdomain_index(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_subdomain_index(self, *args)
    def is_facet_on_surface(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_is_facet_on_surface(self, *args)
    def set_facet_on_surface(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_facet_on_surface(self, *args)
    def is_facet_visited(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_is_facet_visited(self, *args)
    def set_facet_visited(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_facet_visited(self, *args)
    def get_facet_surface_center(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_get_facet_surface_center(self, *args)
    def set_facet_surface_center(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_set_facet_surface_center(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Cell_handle
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Cell_handle_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_handle_swigregister
Mesh_3_regular_triangulation_3_Cell_handle_swigregister(Mesh_3_regular_triangulation_3_Cell_handle)

class Mesh_3_regular_triangulation_3_Vertex_handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Vertex_handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Vertex_handle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Vertex_handle()
        try: self.this.append(this)
        except: self.this = this
    def point(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_point(self, *args)
    def cell(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_cell(self, *args)
    def set_cell(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_set_cell(self, *args)
    def set_point(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_set_point(self, *args)
    def is_valid(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_is_valid(self, *args)
    def __lt__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___lt__(self, *args)
    def __gt__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___gt__(self, *args)
    def __le__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___le__(self, *args)
    def __ge__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___ge__(self, *args)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___ne__(self, *args)
    def __hash__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle___hash__(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_deepcopy(self, *args)
    def in_dimension(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_in_dimension(self)
    def set_dimension(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_set_dimension(self, *args)
    def index(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_index(self)
    def set_index(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_set_index(self, *args)
    def meshing_info(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_meshing_info(self)
    def set_meshing_info(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_set_meshing_info(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Vertex_handle
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Vertex_handle_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Vertex_handle_swigregister
Mesh_3_regular_triangulation_3_Vertex_handle_swigregister(Mesh_3_regular_triangulation_3_Vertex_handle)

class Mesh_3_regular_triangulation_3_Facet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Facet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Facet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Facet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_first_set
    __swig_getmethods__["first"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_first_get
    if _newclass:first = _swig_property(_CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_first_get, _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_first_set)
    __swig_setmethods__["second"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_second_set
    __swig_getmethods__["second"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_second_get
    if _newclass:second = _swig_property(_CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_second_get, _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Facet
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Facet_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_swigregister
Mesh_3_regular_triangulation_3_Facet_swigregister(Mesh_3_regular_triangulation_3_Facet)

class Mesh_3_regular_triangulation_3_Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_first_set
    __swig_getmethods__["first"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_first_get
    if _newclass:first = _swig_property(_CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_first_get, _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_first_set)
    __swig_setmethods__["second"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_second_set
    __swig_getmethods__["second"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_second_get
    if _newclass:second = _swig_property(_CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_second_get, _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_second_set)
    __swig_setmethods__["third"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_third_set
    __swig_getmethods__["third"] = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_third_get
    if _newclass:third = _swig_property(_CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_third_get, _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_third_set)
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Edge
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Edge_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Edge_swigregister
Mesh_3_regular_triangulation_3_Edge_swigregister(Mesh_3_regular_triangulation_3_Edge)

class Internal_Triangulation_3_Mesh_3_regular_triangulation_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Internal_Triangulation_3_Mesh_3_regular_triangulation_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Internal_Triangulation_3_Mesh_3_regular_triangulation_3, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CGAL_Mesh_3.delete_Internal_Triangulation_3_Mesh_3_regular_triangulation_3
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Internal_Triangulation_3_Mesh_3_regular_triangulation_3(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_clear(self)
    def dimension(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_dimension(self)
    def number_of_vertices(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_vertices(self)
    def number_of_cells(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_cells(self)
    def infinite_vertex(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_infinite_vertex(self, *args)
    def infinite_cell(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_infinite_cell(self, *args)
    def number_of_facets(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_facets(self)
    def number_of_edges(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_edges(self)
    def number_of_finite_cells(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_finite_cells(self)
    def number_of_finite_facets(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_finite_facets(self)
    def number_of_finite_edges(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_number_of_finite_edges(self)
    def is_infinite(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_is_infinite(self, *args)
    def is_vertex(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_is_vertex(self, *args)
    def has_vertex(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_has_vertex(self, *args)
    def are_equal(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_are_equal(self, *args)
    def locate(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_locate(self, *args)
    def side_of_cell(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_side_of_cell(self, *args)
    def side_of_facet(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_side_of_facet(self, *args)
    def side_of_edge(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_side_of_edge(self, *args)
    def flip(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_flip(self, *args)
    def flip_flippable(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_flip_flippable(self, *args)
    def insert(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_insert(self, *args)
    def insert_in_cell(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_insert_in_cell(self, *args)
    def insert_in_facet(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_insert_in_facet(self, *args)
    def insert_in_edge(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_insert_in_edge(self, *args)
    def insert_outside_convex_hull(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_insert_outside_convex_hull(self, *args)
    def insert_outside_affine_hull(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_insert_outside_affine_hull(self, *args)
    def finite_vertices(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_vertices(self)
    def finite_edges(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_edges(self)
    def finite_facets(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_facets(self)
    def finite_cells(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_cells(self)
    def all_vertices(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_all_vertices(self)
    def all_edges(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_all_edges(self)
    def all_facets(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_all_facets(self)
    def all_cells(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_all_cells(self)
    def points(self): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_points(self)
    def incident_cells(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_incident_cells(self, *args)
    def finite_incident_cells(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_incident_cells(self, *args)
    def incident_facets(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_incident_facets(self, *args)
    def finite_incident_facets(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_incident_facets(self, *args)
    def incident_edges(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_incident_edges(self, *args)
    def finite_incident_edges(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_incident_edges(self, *args)
    def adjacent_vertices(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_adjacent_vertices(self, *args)
    def finite_adjacent_vertices(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_finite_adjacent_vertices(self, *args)
    def degree(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_degree(self, *args)
    def mirror_index(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_mirror_index(self, *args)
    def mirror_vertex(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_mirror_vertex(self, *args)
    def mirror_facet(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_mirror_facet(self, *args)
    def tetrahedron(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_tetrahedron(self, *args)
    def triangle(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_triangle(self, *args)
    def segment(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_segment(self, *args)
    def point(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_point(self, *args)
    def is_valid(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_is_valid(self, *args)
    def is_cell(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_is_cell(self, *args)
    def equal(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_equal(self, *args)
    def __eq__(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3___ne__(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_deepcopy(self, *args)
    def same_internal_object(self, *args): return _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_same_internal_object(self, *args)
Internal_Triangulation_3_Mesh_3_regular_triangulation_3_swigregister = _CGAL_Mesh_3.Internal_Triangulation_3_Mesh_3_regular_triangulation_3_swigregister
Internal_Triangulation_3_Mesh_3_regular_triangulation_3_swigregister(Internal_Triangulation_3_Mesh_3_regular_triangulation_3)

class Mesh_3_regular_triangulation_3_All_vertices_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_All_vertices_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_All_vertices_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_All_vertices_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_All_vertices_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_All_vertices_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_vertices_iterator_swigregister
Mesh_3_regular_triangulation_3_All_vertices_iterator_swigregister(Mesh_3_regular_triangulation_3_All_vertices_iterator)

class Mesh_3_regular_triangulation_3_Finite_vertices_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Finite_vertices_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Finite_vertices_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Finite_vertices_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Finite_vertices_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Finite_vertices_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_vertices_iterator_swigregister
Mesh_3_regular_triangulation_3_Finite_vertices_iterator_swigregister(Mesh_3_regular_triangulation_3_Finite_vertices_iterator)

class Mesh_3_regular_triangulation_3_All_cells_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_All_cells_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_All_cells_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_All_cells_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_All_cells_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_All_cells_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_cells_iterator_swigregister
Mesh_3_regular_triangulation_3_All_cells_iterator_swigregister(Mesh_3_regular_triangulation_3_All_cells_iterator)

class Mesh_3_regular_triangulation_3_Finite_cells_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Finite_cells_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Finite_cells_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Finite_cells_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Finite_cells_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Finite_cells_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_cells_iterator_swigregister
Mesh_3_regular_triangulation_3_Finite_cells_iterator_swigregister(Mesh_3_regular_triangulation_3_Finite_cells_iterator)

class Mesh_3_regular_triangulation_3_All_facets_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_All_facets_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_All_facets_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_All_facets_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_All_facets_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_All_facets_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_facets_iterator_swigregister
Mesh_3_regular_triangulation_3_All_facets_iterator_swigregister(Mesh_3_regular_triangulation_3_All_facets_iterator)

class Mesh_3_regular_triangulation_3_Finite_facets_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Finite_facets_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Finite_facets_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Finite_facets_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Finite_facets_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Finite_facets_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_facets_iterator_swigregister
Mesh_3_regular_triangulation_3_Finite_facets_iterator_swigregister(Mesh_3_regular_triangulation_3_Finite_facets_iterator)

class Mesh_3_regular_triangulation_3_All_edges_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_All_edges_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_All_edges_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_All_edges_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_All_edges_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_All_edges_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_All_edges_iterator_swigregister
Mesh_3_regular_triangulation_3_All_edges_iterator_swigregister(Mesh_3_regular_triangulation_3_All_edges_iterator)

class Mesh_3_regular_triangulation_3_Finite_edges_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Finite_edges_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Finite_edges_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Finite_edges_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Finite_edges_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Finite_edges_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Finite_edges_iterator_swigregister
Mesh_3_regular_triangulation_3_Finite_edges_iterator_swigregister(Mesh_3_regular_triangulation_3_Finite_edges_iterator)

class Mesh_3_regular_triangulation_3_Point_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Point_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Point_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Point_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Point_iterator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Point_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Point_iterator_swigregister
Mesh_3_regular_triangulation_3_Point_iterator_swigregister(Mesh_3_regular_triangulation_3_Point_iterator)

class Mesh_3_regular_triangulation_3_Cell_circulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Cell_circulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Cell_circulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Cell_circulator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator___iter__(self)
    def next(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator_next(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator_deepcopy(self, *args)
    def prev(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator_prev(self)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Cell_circulator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Cell_circulator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Cell_circulator_swigregister
Mesh_3_regular_triangulation_3_Cell_circulator_swigregister(Mesh_3_regular_triangulation_3_Cell_circulator)

class Mesh_3_regular_triangulation_3_Facet_circulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3_Facet_circulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3_Facet_circulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3_Facet_circulator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator___iter__(self)
    def next(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator_next(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator_deepcopy(self, *args)
    def prev(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator_prev(self)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3_Facet_circulator
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_Facet_circulator_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_Facet_circulator_swigregister
Mesh_3_regular_triangulation_3_Facet_circulator_swigregister(Mesh_3_regular_triangulation_3_Facet_circulator)

class Mesh_3_regular_triangulation_3(Internal_Triangulation_3_Mesh_3_regular_triangulation_3):
    __swig_setmethods__ = {}
    for _s in [Internal_Triangulation_3_Mesh_3_regular_triangulation_3]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_regular_triangulation_3, name, value)
    __swig_getmethods__ = {}
    for _s in [Internal_Triangulation_3_Mesh_3_regular_triangulation_3]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_regular_triangulation_3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Mesh_3_regular_triangulation_3(*args)
        try: self.this.append(this)
        except: self.this = this
    def remove(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_remove(self, *args)
    def side_of_power_sphere(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_side_of_power_sphere(self, *args)
    def side_of_power_circle(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_side_of_power_circle(self, *args)
    def side_of_power_segment(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_side_of_power_segment(self, *args)
    def nearest_power_vertex(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_nearest_power_vertex(self, *args)
    def nearest_power_vertex_in_cell(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_nearest_power_vertex_in_cell(self, *args)
    def is_Gabriel(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_is_Gabriel(self, *args)
    def dual(self, *args): return _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_dual(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_regular_triangulation_3
    __del__ = lambda self : None;
Mesh_3_regular_triangulation_3_swigregister = _CGAL_Mesh_3.Mesh_3_regular_triangulation_3_swigregister
Mesh_3_regular_triangulation_3_swigregister(Mesh_3_regular_triangulation_3)

class Mesh_3_Complex_3_in_triangulation_3_Cell_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Complex_3_in_triangulation_3_Cell_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Complex_3_in_triangulation_3_Cell_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_Complex_3_in_triangulation_3_Cell_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Complex_3_in_triangulation_3_Cell_iterator
    __del__ = lambda self : None;
Mesh_3_Complex_3_in_triangulation_3_Cell_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Cell_iterator_swigregister
Mesh_3_Complex_3_in_triangulation_3_Cell_iterator_swigregister(Mesh_3_Complex_3_in_triangulation_3_Cell_iterator)

class Mesh_3_Complex_3_in_triangulation_3_Facet_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Complex_3_in_triangulation_3_Facet_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Complex_3_in_triangulation_3_Facet_iterator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_Complex_3_in_triangulation_3_Facet_iterator()
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator___iter__(self)
    def next(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator_next(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator_deepcopy(self, *args)
    def hasNext(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator_hasNext(self)
    def __eq__(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator___eq__(self, *args)
    def __ne__(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator___ne__(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Complex_3_in_triangulation_3_Facet_iterator
    __del__ = lambda self : None;
Mesh_3_Complex_3_in_triangulation_3_Facet_iterator_swigregister = _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_Facet_iterator_swigregister
Mesh_3_Complex_3_in_triangulation_3_Facet_iterator_swigregister(Mesh_3_Complex_3_in_triangulation_3_Facet_iterator)

class Mesh_3_Surface_index(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Surface_index, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Surface_index, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Mesh_3_Surface_index(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _CGAL_Mesh_3.Mesh_3_Surface_index_first_set
    __swig_getmethods__["first"] = _CGAL_Mesh_3.Mesh_3_Surface_index_first_get
    if _newclass:first = _swig_property(_CGAL_Mesh_3.Mesh_3_Surface_index_first_get, _CGAL_Mesh_3.Mesh_3_Surface_index_first_set)
    __swig_setmethods__["second"] = _CGAL_Mesh_3.Mesh_3_Surface_index_second_set
    __swig_getmethods__["second"] = _CGAL_Mesh_3.Mesh_3_Surface_index_second_get
    if _newclass:second = _swig_property(_CGAL_Mesh_3.Mesh_3_Surface_index_second_get, _CGAL_Mesh_3.Mesh_3_Surface_index_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Surface_index
    __del__ = lambda self : None;
Mesh_3_Surface_index_swigregister = _CGAL_Mesh_3.Mesh_3_Surface_index_swigregister
Mesh_3_Surface_index_swigregister(Mesh_3_Surface_index)

class Mesh_3_Index(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Index, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Index, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Mesh_3_Index(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_of_first_type(self): return _CGAL_Mesh_3.Mesh_3_Index_is_of_first_type(self)
    def is_of_second_type(self): return _CGAL_Mesh_3.Mesh_3_Index_is_of_second_type(self)
    def get_first(self): return _CGAL_Mesh_3.Mesh_3_Index_get_first(self)
    def get_second(self): return _CGAL_Mesh_3.Mesh_3_Index_get_second(self)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_Index_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Index
    __del__ = lambda self : None;
Mesh_3_Index_swigregister = _CGAL_Mesh_3.Mesh_3_Index_swigregister
Mesh_3_Index_swigregister(Mesh_3_Index)

class Mesh_3_Complex_3_in_triangulation_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh_3_Complex_3_in_triangulation_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh_3_Complex_3_in_triangulation_3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Mesh_3_Complex_3_in_triangulation_3()
        try: self.this.append(this)
        except: self.this = this
    def swap(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_swap(self, *args)
    def triangulation(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_triangulation(self, *args)
    def add_to_complex(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_add_to_complex(self, *args)
    def remove_from_complex(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_remove_from_complex(self, *args)
    def set_subdomain_index(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_set_subdomain_index(self, *args)
    def set_surface_index(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_set_surface_index(self, *args)
    def set_index(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_set_index(self, *args)
    def set_dimension(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_set_dimension(self, *args)
    def number_of_cells(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_number_of_cells(self)
    def number_of_facets(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_number_of_facets(self)
    def is_in_complex(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_is_in_complex(self, *args)
    def subdomain_index(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_subdomain_index(self, *args)
    def surface_index(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_surface_index(self, *args)
    def in_dimension(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_in_dimension(self, *args)
    def index(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_index(self, *args)
    def cells(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_cells(self)
    def facets(self): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_facets(self)
    def output_to_medit(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_output_to_medit(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_deepcopy(self, *args)
    def same_internal_object(self, *args): return _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_same_internal_object(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Mesh_3_Complex_3_in_triangulation_3
    __del__ = lambda self : None;
Mesh_3_Complex_3_in_triangulation_3_swigregister = _CGAL_Mesh_3.Mesh_3_Complex_3_in_triangulation_3_swigregister
Mesh_3_Complex_3_in_triangulation_3_swigregister(Mesh_3_Complex_3_in_triangulation_3)

class Polyhedral_mesh_domain_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polyhedral_mesh_domain_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polyhedral_mesh_domain_3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _CGAL_Mesh_3.new_Polyhedral_mesh_domain_3(*args)
        try: self.this.append(this)
        except: self.this = this
    def index_from_surface_index(self, *args): return _CGAL_Mesh_3.Polyhedral_mesh_domain_3_index_from_surface_index(self, *args)
    def index_from_subdomain_index(self, *args): return _CGAL_Mesh_3.Polyhedral_mesh_domain_3_index_from_subdomain_index(self, *args)
    def surface_index(self, *args): return _CGAL_Mesh_3.Polyhedral_mesh_domain_3_surface_index(self, *args)
    def subdomain_index(self, *args): return _CGAL_Mesh_3.Polyhedral_mesh_domain_3_subdomain_index(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Polyhedral_mesh_domain_3
    __del__ = lambda self : None;
Polyhedral_mesh_domain_3_swigregister = _CGAL_Mesh_3.Polyhedral_mesh_domain_3_swigregister
Polyhedral_mesh_domain_3_swigregister(Polyhedral_mesh_domain_3)

class Default_mesh_criteria(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Default_mesh_criteria, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Default_mesh_criteria, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _CGAL_Mesh_3.new_Default_mesh_criteria()
        try: self.this.append(this)
        except: self.this = this
    def edge_size(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_edge_size(self, *args)
    def facet_angle(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_facet_angle(self, *args)
    def facet_size(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_facet_size(self, *args)
    def facet_distance(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_facet_distance(self, *args)
    def facet_topology(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_facet_topology(self, *args)
    def cell_radius_edge_ratio(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_cell_radius_edge_ratio(self, *args)
    def cell_size(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_cell_size(self, *args)
    def deepcopy(self, *args): return _CGAL_Mesh_3.Default_mesh_criteria_deepcopy(self, *args)
    __swig_destroy__ = _CGAL_Mesh_3.delete_Default_mesh_criteria
    __del__ = lambda self : None;
Default_mesh_criteria_swigregister = _CGAL_Mesh_3.Default_mesh_criteria_swigregister
Default_mesh_criteria_swigregister(Default_mesh_criteria)


def exude_mesh_3(*args):
  return _CGAL_Mesh_3.exude_mesh_3(*args)
exude_mesh_3 = _CGAL_Mesh_3.exude_mesh_3

def perturb_mesh_3(*args):
  return _CGAL_Mesh_3.perturb_mesh_3(*args)
perturb_mesh_3 = _CGAL_Mesh_3.perturb_mesh_3

def lloyd_optimize_mesh_3(*args):
  return _CGAL_Mesh_3.lloyd_optimize_mesh_3(*args)
lloyd_optimize_mesh_3 = _CGAL_Mesh_3.lloyd_optimize_mesh_3

def odt_optimize_mesh_3(*args):
  return _CGAL_Mesh_3.odt_optimize_mesh_3(*args)
odt_optimize_mesh_3 = _CGAL_Mesh_3.odt_optimize_mesh_3

def make_mesh_3(*args):
  return _CGAL_Mesh_3.make_mesh_3(*args)
make_mesh_3 = _CGAL_Mesh_3.make_mesh_3

def refine_mesh_3(*args):
  return _CGAL_Mesh_3.refine_mesh_3(*args)
refine_mesh_3 = _CGAL_Mesh_3.refine_mesh_3
# This file is compatible with both classic and new-style classes.


