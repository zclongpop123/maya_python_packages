# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CGAL_Point_set_processing_3', [dirname(__file__)])
        except ImportError:
            import _CGAL_Point_set_processing_3
            return _CGAL_Point_set_processing_3
        if fp is not None:
            try:
                _mod = imp.load_module('_CGAL_Point_set_processing_3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CGAL_Point_set_processing_3 = swig_import_helper()
    del swig_import_helper
else:
    import _CGAL_Point_set_processing_3
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import CGAL.CGAL_Kernel

def compute_average_spacing(*args):
  return _CGAL_Point_set_processing_3.compute_average_spacing(*args)
compute_average_spacing = _CGAL_Point_set_processing_3.compute_average_spacing

def grid_simplify_point_set(*args):
  return _CGAL_Point_set_processing_3.grid_simplify_point_set(*args)
grid_simplify_point_set = _CGAL_Point_set_processing_3.grid_simplify_point_set

def random_simplify_point_set(*args):
  return _CGAL_Point_set_processing_3.random_simplify_point_set(*args)
random_simplify_point_set = _CGAL_Point_set_processing_3.random_simplify_point_set

def remove_outliers(*args):
  return _CGAL_Point_set_processing_3.remove_outliers(*args)
remove_outliers = _CGAL_Point_set_processing_3.remove_outliers

def jet_smooth_point_set(*args):
  return _CGAL_Point_set_processing_3.jet_smooth_point_set(*args)
jet_smooth_point_set = _CGAL_Point_set_processing_3.jet_smooth_point_set

def jet_estimate_normals(*args):
  return _CGAL_Point_set_processing_3.jet_estimate_normals(*args)
jet_estimate_normals = _CGAL_Point_set_processing_3.jet_estimate_normals

def mst_orient_normals(*args):
  return _CGAL_Point_set_processing_3.mst_orient_normals(*args)
mst_orient_normals = _CGAL_Point_set_processing_3.mst_orient_normals

def pca_estimate_normals(*args):
  return _CGAL_Point_set_processing_3.pca_estimate_normals(*args)
pca_estimate_normals = _CGAL_Point_set_processing_3.pca_estimate_normals

def read_off_points(*args):
  return _CGAL_Point_set_processing_3.read_off_points(*args)
read_off_points = _CGAL_Point_set_processing_3.read_off_points

def read_xyz_points(*args):
  return _CGAL_Point_set_processing_3.read_xyz_points(*args)
read_xyz_points = _CGAL_Point_set_processing_3.read_xyz_points

def write_off_points(*args):
  return _CGAL_Point_set_processing_3.write_off_points(*args)
write_off_points = _CGAL_Point_set_processing_3.write_off_points

def write_xyz_points(*args):
  return _CGAL_Point_set_processing_3.write_xyz_points(*args)
write_xyz_points = _CGAL_Point_set_processing_3.write_xyz_points

def read_xyz_points_and_normals(*args):
  return _CGAL_Point_set_processing_3.read_xyz_points_and_normals(*args)
read_xyz_points_and_normals = _CGAL_Point_set_processing_3.read_xyz_points_and_normals

def read_off_points_and_normals(*args):
  return _CGAL_Point_set_processing_3.read_off_points_and_normals(*args)
read_off_points_and_normals = _CGAL_Point_set_processing_3.read_off_points_and_normals

def write_off_points_and_normals(*args):
  return _CGAL_Point_set_processing_3.write_off_points_and_normals(*args)
write_off_points_and_normals = _CGAL_Point_set_processing_3.write_off_points_and_normals

def write_xyz_points_and_normals(*args):
  return _CGAL_Point_set_processing_3.write_xyz_points_and_normals(*args)
write_xyz_points_and_normals = _CGAL_Point_set_processing_3.write_xyz_points_and_normals
# This file is compatible with both classic and new-style classes.


